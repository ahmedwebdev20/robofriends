{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","id","name","email","className","alt","src","CardList","robots","cardArray","map","user","i","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","searchfiled","target","value","console","log","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"oOAqBeA,EAnBF,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,GAAIC,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,MAItB,OACI,yBAAKC,UAAU,uDAEX,yBAAKC,IAAI,QAAQC,IAAK,wBAA0BL,IAEhD,6BACI,4BAAKC,EAAL,KACA,+BAAKC,MCMNI,EAhBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAEVC,EAAYD,EAAOE,KAAI,SAACC,EAAMC,GAChC,OAAO,kBAAC,EAAD,CACHC,IAAKD,EACLX,GAAIO,EAAOI,GAAGX,GACdC,KAAMM,EAAOI,GAAGV,KAChBC,MAAOK,EAAOI,GAAGT,WAGzB,OACI,6BACKM,ICAEK,EAZC,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,aACd,OACI,yBAAKX,UAAU,oCACX,2BACAA,UAAU,MACVY,KAAK,SACLC,YAAY,eACZC,SAAUH,MCCPI,EATA,SAACC,GACZ,OACI,yBAAKC,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,UAEhEJ,EAAMK,WCsBJC,G,wDAzBX,WAAaN,GAAO,IAAD,8BACf,cAAMA,IACDO,MAAO,CACRC,UAAS,GAHE,E,8DAQLC,EAAOC,GACrBC,KAAKC,SAAS,CAACJ,UAAS,M,+BAMpB,OAAIG,KAAKJ,MAAMC,SACJ,+DAEAG,KAAKX,MAAMK,a,GAnBHQ,cCkDZC,E,kDA1CX,aAAe,IAAD,8BACV,gBAYJC,eAAiB,SAACC,GACd,EAAKJ,SAAS,CAAEK,YAAaD,EAAME,OAAOC,QAC1CC,QAAQC,IAAIL,EAAME,OAAOC,QAbzB,EAAKZ,MAAQ,CACTnB,OAAQ,GACR6B,YAAa,IAJP,E,gEAOO,IAAD,OAChBK,MAAM,6CACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKd,SAAS,CAAExB,OAAQsC,S,+BAQrC,IAAD,EAC2Bf,KAAKJ,MAA7BnB,EADH,EACGA,OAAQ6B,EADX,EACWA,YACVU,EAAiBvC,EAAOwC,QAAO,SAAAC,GACjC,OAAOA,EAAM/C,KAAKgD,cAAcC,SAASd,EAAYa,kBAEzD,OAAQ1C,EAAO4C,OAGP,yBAAKhD,UAAU,MACX,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWW,aAAcgB,KAAKI,iBAC9B,kBAAC,EAAD,KACI,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAU3B,OAAQuC,OAPlC,8C,GAzBMd,aCGEoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCRNC,IAASC,OAEP,kBAAC,EAAD,MAEEC,SAASC,eAAe,SDqHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdC,OAAM,SAAAtC,GACLW,QAAQX,MAAMA,EAAMuC,a","file":"static/js/main.3adc68a5.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nconst Card = ({ id, name, email }) => {\n\n    //or const {id, name, email} = props;\n\n    return (\n        <div className='tc grow bg-light-green br3 pa3 ma2 dib bw2 shadow-5'>\n\n            <img alt='robot' src={'https://robohash.org/' + id} />\n\n            <div>\n                <h2>{name} </h2>\n                <p> {email}</p>\n\n            </div>\n        </div>\n\n    );\n}\n\nexport default Card;\n\n","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n \n    const cardArray = robots.map((user, i) => {\n        return <Card\n            key={i}\n            id={robots[i].id}\n            name={robots[i].name}\n            email={robots[i].email} />\n    })\n \n    return (\n        <div>\n            {cardArray}\n        </div>\n    );\n}\nexport default CardList;\n","import React from 'react'\n//className='pa3 ba b--green bg-lightest-blue' \n//className='pa2'\nconst SearchBox=({searchChange})=> {\n    return (\n        <div className='pa3 ba b--green bg-lightest-blue' >\n            <input \n            className='pa2' \n            type=\"search\" \n            placeholder=\"search robot\" \n            onChange={searchChange}/>\n\n        </div>\n    );\n}\nexport default SearchBox;","import React, { Component } from 'react'\n\nconst Scroll = (props) => {\n    return (\n        <div style={{overflowY: 'scroll' ,border: '5px solid black', height: '500px'}}>\n            {/*props.children*/}\n            {props.children}\n        </div>\n    );\n};\n\nexport default Scroll;\n","import React, {Component} from 'react'\n\nclass ErrorBoundry extends Component {\n    constructor (props){\n        super(props);\n        this.state ={ \n            hasError:false\n\n        }\n\n    }\ncomponentDidCatch(error, info){\n    this.setState({hasError:true})\n\n}\n\n    render(){\n\n        if (this.state.hasError){\n            return <h1> Ooooooooooop! this is not good</h1>\n        } else {\n            return this.props.children\n        }\n\n    }\n    \n}\n\nexport default ErrorBoundry;","import React, { Component } from 'react'\nimport CardList from '../components/CardList';\n//import { robots } from './robots';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport './App.css';\nimport ErrorBoundry from '../components/ErrorBoundry';\n\n\nclass App extends Component {\n    constructor() {\n        super()\n        this.state = {\n            robots: [],\n            searchfiled: ''\n        }\n    }\n    componentDidMount() {//we use () because this is part of react component \n        fetch('http://jsonplaceholder.typicode.com/users')\n            .then(response => response.json()) // .then(response =>{response.json()}) \n            .then(users => this.setState({ robots: users }))\n    }\n\n    onSearchChange = (event) => {\n        this.setState({ searchfiled: event.target.value })\n        console.log(event.target.value);\n\n    }\n    render() {\n        const { robots, searchfiled } = this.state;\n        const filteredRobots = robots.filter(robot => {\n            return robot.name.toLowerCase().includes(searchfiled.toLowerCase())\n        })\n        return !robots.length ? //robots.length === 0\n            <h1>Loding ...</h1> :\n            (\n                <div className='tc'>\n                    <h1 className='f2'>Robofriends</h1>\n                    <SearchBox searchChange={this.onSearchChange} />\n                    <Scroll>\n                        <ErrorBoundry>\n                            <CardList robots={filteredRobots} />\n                        </ErrorBoundry>\n                    </Scroll>\n                </div>\n            );\n    }\n\n\n\n}\n\nexport default App; ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n//import Card from './Card';\n//import CardList from './CardList';\n//import { robots } from './robots'\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(\n  //<React.StrictMode>\n  <App/>\n  // </React.StrictMode>,\n  , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}